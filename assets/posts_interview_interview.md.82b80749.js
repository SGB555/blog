import{_ as s,c as a,o as n,a as l}from"./app.0edfee5d.js";const A=JSON.parse(`{"title":"面试题集","description":"","frontmatter":{"title":"面试题集","date":"2020-03-16T23:22:04.000Z","tags":"interview"},"headers":[{"level":2,"title":"了解 Flex 布局么？平常有使用 Flex 进行布局么？","slug":"了解-flex-布局么-平常有使用-flex-进行布局么","link":"#了解-flex-布局么-平常有使用-flex-进行布局么","children":[]},{"level":2,"title":"如何解决浮动中高度塌陷的方案？","slug":"如何解决浮动中高度塌陷的方案","link":"#如何解决浮动中高度塌陷的方案","children":[{"level":3,"title":"高度塌陷的原因：","slug":"高度塌陷的原因","link":"#高度塌陷的原因","children":[]},{"level":3,"title":"解决方案：","slug":"解决方案","link":"#解决方案","children":[]}]},{"level":2,"title":"说说 CSS 选择器以及这些选择器的优先级","slug":"说说-css-选择器以及这些选择器的优先级","link":"#说说-css-选择器以及这些选择器的优先级","children":[]},{"level":2,"title":"了解盒模型么","slug":"了解盒模型么","link":"#了解盒模型么","children":[]},{"level":2,"title":"伪类和伪元素的区别","slug":"伪类和伪元素的区别","link":"#伪类和伪元素的区别","children":[{"level":3,"title":"概念区别","slug":"概念区别","link":"#概念区别","children":[]},{"level":3,"title":"使用区别","slug":"使用区别","link":"#使用区别","children":[]}]},{"level":2,"title":"布局问题","slug":"布局问题","link":"#布局问题","children":[]},{"level":2,"title":"如何异步加载 CSS","slug":"如何异步加载-css","link":"#如何异步加载-css","children":[{"level":3,"title":"JS 动态创建 link 元素","slug":"js-动态创建-link-元素","link":"#js-动态创建-link-元素","children":[]},{"level":3,"title":"link 元素的 media 属性设置","slug":"link-元素的-media-属性设置","link":"#link-元素的-media-属性设置","children":[]},{"level":3,"title":"rel='preload'","slug":"rel-preload","link":"#rel-preload","children":[]}]},{"level":2,"title":"CSS 选择器的解析顺序是什么，为什么。","slug":"css-选择器的解析顺序是什么-为什么。","link":"#css-选择器的解析顺序是什么-为什么。","children":[{"level":3,"title":"解析顺序","slug":"解析顺序","link":"#解析顺序","children":[]},{"level":3,"title":"为什么","slug":"为什么","link":"#为什么","children":[]}]},{"level":2,"title":"@import","slug":"import","link":"#import","children":[]},{"level":2,"title":"CSS 引入的方式有哪些？link 和@import 的区别是？","slug":"css-引入的方式有哪些-link-和-import-的区别是","link":"#css-引入的方式有哪些-link-和-import-的区别是","children":[{"level":3,"title":"引入方式","slug":"引入方式","link":"#引入方式","children":[]},{"level":3,"title":"link 和@import 的区别","slug":"link-和-import-的区别","link":"#link-和-import-的区别","children":[]}]},{"level":2,"title":"CSS 的加载会阻塞 DOM 树解析和渲染吗？为什么？","slug":"css-的加载会阻塞-dom-树解析和渲染吗-为什么","link":"#css-的加载会阻塞-dom-树解析和渲染吗-为什么","children":[]},{"level":2,"title":"回流和重绘","slug":"回流和重绘","link":"#回流和重绘","children":[{"level":3,"title":"回流","slug":"回流","link":"#回流","children":[]},{"level":3,"title":"重绘","slug":"重绘","link":"#重绘","children":[]},{"level":3,"title":"如何避免","slug":"如何避免","link":"#如何避免","children":[]}]},{"level":2,"title":"new 调用函数的过程","slug":"new-调用函数的过程","link":"#new-调用函数的过程","children":[]},{"level":2,"title":"原型/实例","slug":"原型-实例","link":"#原型-实例","children":[]},{"level":2,"title":"constructor","slug":"constructor","link":"#constructor","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":2,"title":"赋值和深浅拷贝","slug":"赋值和深浅拷贝","link":"#赋值和深浅拷贝","children":[]},{"level":2,"title":"模块化","slug":"模块化","link":"#模块化","children":[{"level":3,"title":"CommonJs","slug":"commonjs","link":"#commonjs","children":[]},{"level":3,"title":"AMD","slug":"amd","link":"#amd","children":[]},{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"ES6 module","slug":"es6-module","link":"#es6-module","children":[]},{"level":3,"title":"ES6 和 commonjs 的区别","slug":"es6-和-commonjs-的区别","link":"#es6-和-commonjs-的区别","children":[]}]},{"level":2,"title":"节流和防抖","slug":"节流和防抖","link":"#节流和防抖","children":[]},{"level":2,"title":"手写 call、apply、bind","slug":"手写-call、apply、bind","link":"#手写-call、apply、bind","children":[{"level":3,"title":"call","slug":"call","link":"#call","children":[]},{"level":3,"title":"apply","slug":"apply","link":"#apply","children":[]},{"level":3,"title":"bind","slug":"bind","link":"#bind","children":[]}]},{"level":2,"title":"什么是提升","slug":"什么是提升","link":"#什么是提升","children":[{"level":3,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[]},{"level":3,"title":"函数提升","slug":"函数提升","link":"#函数提升","children":[]},{"level":3,"title":"函数优先","slug":"函数优先","link":"#函数优先","children":[]},{"level":3,"title":"暂时性死区（Temporal Dead Zone）","slug":"暂时性死区-temporal-dead-zone","link":"#暂时性死区-temporal-dead-zone","children":[]}]},{"level":2,"title":"如何实现继承","slug":"如何实现继承","link":"#如何实现继承","children":[{"level":3,"title":"es5 寄生组合继承","slug":"es5-寄生组合继承","link":"#es5-寄生组合继承","children":[]},{"level":3,"title":"es6 class 组合继承","slug":"es6-class-组合继承","link":"#es6-class-组合继承","children":[]}]},{"level":2,"title":"实现 add(1,1).add(2,3) // 7","slug":"实现-add-1-1-add-2-3-7","link":"#实现-add-1-1-add-2-3-7","children":[]},{"level":2,"title":"EventLoop","slug":"eventloop","link":"#eventloop","children":[{"level":3,"title":"简单概念回答","slug":"简单概念回答","link":"#简单概念回答","children":[]},{"level":3,"title":"宏任务与微任务","slug":"宏任务与微任务","link":"#宏任务与微任务","children":[]}]},{"level":2,"title":"什么是 vue","slug":"什么是-vue","link":"#什么是-vue","children":[]},{"level":2,"title":"v-show 与 v-if 有什么区别","slug":"v-show-与-v-if-有什么区别","link":"#v-show-与-v-if-有什么区别","children":[]},{"level":2,"title":"vue 的父组件和子组件生命周期钩子函数执行顺序","slug":"vue-的父组件和子组件生命周期钩子函数执行顺序","link":"#vue-的父组件和子组件生命周期钩子函数执行顺序","children":[]},{"level":2,"title":"computed 和 watch 的区别和运用场景","slug":"computed-和-watch-的区别和运用场景","link":"#computed-和-watch-的区别和运用场景","children":[]},{"level":2,"title":"Vue.js 源码入口主要做了些什么处理","slug":"vue-js-源码入口主要做了些什么处理","link":"#vue-js-源码入口主要做了些什么处理","children":[]},{"level":2,"title":"Vue.js 中的数据劫持是怎么实现的？浏览器兼容性呢","slug":"vue-js-中的数据劫持是怎么实现的-浏览器兼容性呢","link":"#vue-js-中的数据劫持是怎么实现的-浏览器兼容性呢","children":[]},{"level":2,"title":"Vue.js 中的依赖收集是怎么处理的？和闭包有什么关联吗？","slug":"vue-js-中的依赖收集是怎么处理的-和闭包有什么关联吗","link":"#vue-js-中的依赖收集是怎么处理的-和闭包有什么关联吗","children":[{"level":3,"title":"依赖收集","slug":"依赖收集","link":"#依赖收集","children":[]},{"level":3,"title":"和闭包有什么关联吗","slug":"和闭包有什么关联吗","link":"#和闭包有什么关联吗","children":[]}]},{"level":2,"title":"Vue.js 中的模版解析需要经历哪几个阶段？","slug":"vue-js-中的模版解析需要经历哪几个阶段","link":"#vue-js-中的模版解析需要经历哪几个阶段","children":[]},{"level":2,"title":"Vue.js 中的 虚拟节点优势是什么？","slug":"vue-js-中的-虚拟节点优势是什么","link":"#vue-js-中的-虚拟节点优势是什么","children":[]},{"level":2,"title":"props、data、compute、watch、methods、created、mounted 的初始化顺序","slug":"props、data、compute、watch、methods、created、mounted-的初始化顺序","link":"#props、data、compute、watch、methods、created、mounted-的初始化顺序","children":[]},{"level":2,"title":"slot 是什么？有什么作用？原理是什么？","slug":"slot-是什么-有什么作用-原理是什么","link":"#slot-是什么-有什么作用-原理是什么","children":[{"level":3,"title":"是什么","slug":"是什么","link":"#是什么","children":[]},{"level":3,"title":"有什么作用","slug":"有什么作用","link":"#有什么作用","children":[]},{"level":3,"title":"原理是什么？","slug":"原理是什么","link":"#原理是什么","children":[]}]},{"level":2,"title":"template 预编译是什么？","slug":"template-预编译是什么","link":"#template-预编译是什么","children":[]},{"level":2,"title":"说说 Vue3.0 和 Vue2.0 有什么区别","slug":"说说-vue3-0-和-vue2-0-有什么区别","link":"#说说-vue3-0-和-vue2-0-有什么区别","children":[]},{"level":2,"title":"Composition API 与 React Hook 的区别","slug":"composition-api-与-react-hook-的区别","link":"#composition-api-与-react-hook-的区别","children":[]},{"level":2,"title":"nextTick 知道吗，实现原理是什么？","slug":"nexttick-知道吗-实现原理是什么","link":"#nexttick-知道吗-实现原理是什么","children":[{"level":3,"title":"是什么","slug":"是什么-1","link":"#是什么-1","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"Vue.js 中的 M/V/VM 分别指什么","slug":"vue-js-中的-m-v-vm-分别指什么","link":"#vue-js-中的-m-v-vm-分别指什么","children":[]},{"level":2,"title":"TypeScript 与 JavaScript 的区别","slug":"typescript-与-javascript-的区别","link":"#typescript-与-javascript-的区别","children":[]},{"level":2,"title":"js 项目如何升级为 ts？有何影响？","slug":"js-项目如何升级为-ts-有何影响","link":"#js-项目如何升级为-ts-有何影响","children":[]},{"level":2,"title":"ts 基础类型都哪些，他们跟 js 的区别","slug":"ts-基础类型都哪些-他们跟-js-的区别","link":"#ts-基础类型都哪些-他们跟-js-的区别","children":[]},{"level":2,"title":"ts 为什么会流行？与 ECMA 新规范的关系？","slug":"ts-为什么会流行-与-ecma-新规范的关系","link":"#ts-为什么会流行-与-ecma-新规范的关系","children":[]},{"level":2,"title":"tslint 都能配置哪些功能？对开发流程有何影响？","slug":"tslint-都能配置哪些功能-对开发流程有何影响","link":"#tslint-都能配置哪些功能-对开发流程有何影响","children":[]},{"level":2,"title":"如何使用 js 实现类型约束，枚举等特性么？","slug":"如何使用-js-实现类型约束-枚举等特性么","link":"#如何使用-js-实现类型约束-枚举等特性么","children":[]},{"level":2,"title":"如何理解接口，泛型?","slug":"如何理解接口-泛型","link":"#如何理解接口-泛型","children":[]},{"level":2,"title":"观察者模式和发布-订阅模式的区别","slug":"观察者模式和发布-订阅模式的区别","link":"#观察者模式和发布-订阅模式的区别","children":[]},{"level":2,"title":"MVC/MVP/MVVM 的区别","slug":"mvc-mvp-mvvm-的区别","link":"#mvc-mvp-mvvm-的区别","children":[{"level":3,"title":"MVC","slug":"mvc","link":"#mvc","children":[]},{"level":3,"title":"MVP","slug":"mvp","link":"#mvp","children":[]},{"level":3,"title":"MVC 和 MVP 的关系","slug":"mvc-和-mvp-的关系","link":"#mvc-和-mvp-的关系","children":[]},{"level":3,"title":"MVVM","slug":"mvvm","link":"#mvvm","children":[]}]},{"level":2,"title":"webpack3 和 webpack4 的区别","slug":"webpack3-和-webpack4-的区别","link":"#webpack3-和-webpack4-的区别","children":[]},{"level":2,"title":"HTTP1 和 HTTP2、HTTP3 的区别","slug":"http1-和-http2、http3-的区别","link":"#http1-和-http2、http3-的区别","children":[]},{"level":2,"title":"介绍一下 HTTPS 和 HTTP 区别","slug":"介绍一下-https-和-http-区别","link":"#介绍一下-https-和-http-区别","children":[]},{"level":2,"title":"跨域","slug":"跨域","link":"#跨域","children":[]}],"relativePath":"posts/interview/interview.md"}`),p={name:"posts/interview/interview.md"},o=l(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-hidden="true">#</a></h1><h2 id="了解-flex-布局么-平常有使用-flex-进行布局么" tabindex="-1">了解 Flex 布局么？平常有使用 Flex 进行布局么？ <a class="header-anchor" href="#了解-flex-布局么-平常有使用-flex-进行布局么" aria-hidden="true">#</a></h2><ul><li><p>采用 flex 布局的元素，成为 flex 容器（flex container），其自元素自动成为容器成员（flex item）</p></li><li><p>容器默认存在两根轴：水平的主轴（main axis），垂直的交叉轴（cross axis）</p></li><li><p>个人常用：flex-direction justify-content align-item</p></li><li><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p></li></ul><h2 id="如何解决浮动中高度塌陷的方案" tabindex="-1">如何解决浮动中高度塌陷的方案？ <a class="header-anchor" href="#如何解决浮动中高度塌陷的方案" aria-hidden="true">#</a></h2><h3 id="高度塌陷的原因" tabindex="-1">高度塌陷的原因： <a class="header-anchor" href="#高度塌陷的原因" aria-hidden="true">#</a></h3><p>如果块级父元素 height 为 auto 或不设置，没有设置 padding 或 border 属性，且只有块级子元素，那么父元素的默认高度将由子元素的盒模型决定，从最高块级子元素的外边框边界到最低块级子元素的外边框边界之间的距离（注意不包含子元素的的外边距 margin 值，当子元素设置为浮动时会脱离文档流，而父元素若没有其他未设置浮动的子元素则会出现高度崩塌</p><h3 id="解决方案" tabindex="-1">解决方案： <a class="header-anchor" href="#解决方案" aria-hidden="true">#</a></h3><h4 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a></h4><h5 id="清除浮动的原理" tabindex="-1">清除浮动的原理： <a class="header-anchor" href="#清除浮动的原理" aria-hidden="true">#</a></h5><p><strong>CSS2.1</strong> 引入了<strong>清除区域</strong>的概念，清除区域是在元素上外边距之上增加的额外间隔（确保浮动元素不会与该元素重叠），不允许浮动元素进入这个范围，意味着设置 clear 属性的元素的外边距并不改变，之所以该元素会向下移动是因为清除区域造成的。</p><h5 id="解决方案-1-追加元素并设置clear属性。" tabindex="-1">解决方案 1:追加元素并设置<strong>clear</strong>属性。 <a class="header-anchor" href="#解决方案-1-追加元素并设置clear属性。" aria-hidden="true">#</a></h5><ul><li>优势：简单，布局灵活，浏览器兼容性好</li><li>弊端：添加了不必要的 dom</li></ul><p>如果父元素高度塌陷，则可以通过在父元素的尾部追加空的子元素，并利用<strong>clear:both</strong>解决塌陷问题。</p><h5 id="解决方案-2-使用-css-样式插入元素" tabindex="-1">解决方案 2:使用 CSS 样式插入元素 <a class="header-anchor" href="#解决方案-2-使用-css-样式插入元素" aria-hidden="true">#</a></h5><ul><li>优势：不破坏文档结构，没有副作用</li><li>弊端：使用 display:block 会使父子元素的垂直外边距重叠</li></ul><p>原理其实和追加元素并设置 clear 属性相同，只是使用 css 样式来处理。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="包含浮动" tabindex="-1">包含浮动： <a class="header-anchor" href="#包含浮动" aria-hidden="true">#</a></h4><h5 id="包含浮动的原理" tabindex="-1">包含浮动的原理： <a class="header-anchor" href="#包含浮动的原理" aria-hidden="true">#</a></h5><p>包含浮动即用 BFC 的特性来包含浮动从而解决父元素高度崩塌的问题</p><h5 id="什么是-bfc" tabindex="-1">什么是 BFC <a class="header-anchor" href="#什么是-bfc" aria-hidden="true">#</a></h5><p>BFC(Block formatting context)直译为&quot;块级格式化上下文&quot;。它是一个独立的渲染区域，只有 Block-level box 参与， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。</p><p>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</p><h5 id="bfc-特性" tabindex="-1">BFC 特性 <a class="header-anchor" href="#bfc-特性" aria-hidden="true">#</a></h5><ul><li><p>BFC 会阻止垂直外边距（margin-top、margin-bottom）折叠（属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 ）</p></li><li><p>BFC 不会重叠浮动元素</p></li><li><p>BFC 可以包含浮动（计算 BFC 的高度时，浮动元素的高度也参与计算 ，可以利用 BFC 的这个特性来“清浮动”，应该说包含浮动。也就是说只要父容器形成 BFC 就可以）</p></li></ul><p>需要注意的是<strong>根元素本身就能触发一个 BFC</strong>，事实上除了根元素以外以下的方式也能触发 BFC</p><ul><li>float （left，right）</li><li>overflow 除了 visible 以外的值（hidden，auto，scroll）</li><li>display (table-cell，table-caption，inline-block)</li><li>position（absolute，fixed）</li></ul><h2 id="说说-css-选择器以及这些选择器的优先级" tabindex="-1">说说 CSS 选择器以及这些选择器的优先级 <a class="header-anchor" href="#说说-css-选择器以及这些选择器的优先级" aria-hidden="true">#</a></h2><ul><li>!important</li><li>内联选择器（1000）</li><li>ID 选择器（0100）</li><li>类选择器/属性选择器/伪类选择器（0010）</li><li>元素选择器/关系选择器/伪元素选择器（0001）</li><li>通配符选择器（0000）</li></ul><p><strong>需要注意的是逻辑伪类整个选择器语句的优先级是由括号里面内容决定的，不同的逻辑伪类规则不一样，其中:not()伪类的本身没有优先级，最终优先级是由括号里面的选择器决定的。</strong></p><h2 id="了解盒模型么" tabindex="-1">了解盒模型么 <a class="header-anchor" href="#了解盒模型么" aria-hidden="true">#</a></h2><ul><li><p>标准盒子模型：box-sizing: content-box（W3C 盒子模型）：元素的宽高大小表现为内容的大小。</p></li><li><p>怪异盒子模型：box-sizing: border-box（IE 盒子模型）：元素的宽高表现为内容 + 内边距 + 边框的大小。背景会延伸到边框的外沿。</p></li></ul><h2 id="伪类和伪元素的区别" tabindex="-1">伪类和伪元素的区别 <a class="header-anchor" href="#伪类和伪元素的区别" aria-hidden="true">#</a></h2><h3 id="概念区别" tabindex="-1">概念区别 <a class="header-anchor" href="#概念区别" aria-hidden="true">#</a></h3><p>伪类操作的是 dom 树上已存在的元素，而伪元素则是创建一个 dom 树外的元素。因此，伪类和伪元素的区别在于：<strong>有没有创建 dom 树之外的元素</strong></p><h3 id="使用区别" tabindex="-1">使用区别 <a class="header-anchor" href="#使用区别" aria-hidden="true">#</a></h3><p>伪类要求使用单冒号(😃，比如:link、:visited、:hover、:active; 伪元素要求使用双冒号(:😃，比如::before、::after</p><h2 id="布局问题" tabindex="-1">布局问题 <a class="header-anchor" href="#布局问题" aria-hidden="true">#</a></h2><p><a href="http://pok888.gitee.io/blog/2020/03/17/css/layout/" target="_blank" rel="noreferrer">布局问题</a></p><h2 id="如何异步加载-css" tabindex="-1">如何异步加载 CSS <a class="header-anchor" href="#如何异步加载-css" aria-hidden="true">#</a></h2><h3 id="js-动态创建-link-元素" tabindex="-1">JS 动态创建 link 元素 <a class="header-anchor" href="#js-动态创建-link-元素" aria-hidden="true">#</a></h3><p>第一种方式是使用 JavaScript 动态创建样式表 link 元素，并插入到 DOM 中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建link标签</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myCSS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">link</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">myCSS</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rel </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">myCSS</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mystyles.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 插入到header的最后位置</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">insertBefore</span><span style="color:#A6ACCD;">(myCSS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes[document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">nextSibling)</span></span>
<span class="line"></span></code></pre></div><h3 id="link-元素的-media-属性设置" tabindex="-1">link 元素的 media 属性设置 <a class="header-anchor" href="#link-元素的-media-属性设置" aria-hidden="true">#</a></h3><p>第二种方式就是将 link 元素的 meida 属性设置为用户浏览器不匹配的媒体类型（或媒体查询），如<strong>meida=&#39;print&#39;</strong>。对浏览器来说，如果样式表不适用于当前媒体类型，其优先级会被放低，会在不阻塞页面渲染的情况下再进行下载。</p><h3 id="rel-preload" tabindex="-1">rel=&#39;preload&#39; <a class="header-anchor" href="#rel-preload" aria-hidden="true">#</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">preload</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mystyles.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">as</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">style</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onload</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;this.</span><span style="color:#A6ACCD;">rel</span><span style="color:#89DDFF;">=&#39;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&#39;&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>注意，as 是必须的。忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么内容，因此此类资源加载优先级会非常低。</p><p>看起来，rel=&quot;preload&quot; 的用法和上面两种没什么区别，都是通过更改某些属性，使得浏览器异步加载 CSS 文件但不解析，直到加载完成并将修改还原，然后开始解析。 但是它们之间其实有一个很重要的不同点，那就是使用 preload，比使用不匹配的 media 方法能够更早地开始加载 CSS。所以尽管这一标准的支持度还不完善，仍建议优先使用该方法。</p><h2 id="css-选择器的解析顺序是什么-为什么。" tabindex="-1">CSS 选择器的解析顺序是什么，为什么。 <a class="header-anchor" href="#css-选择器的解析顺序是什么-为什么。" aria-hidden="true">#</a></h2><h3 id="解析顺序" tabindex="-1">解析顺序 <a class="header-anchor" href="#解析顺序" aria-hidden="true">#</a></h3><p>css 选择器的解析顺序是从右往左的</p><h3 id="为什么" tabindex="-1">为什么 <a class="header-anchor" href="#为什么" aria-hidden="true">#</a></h3><p>因为从右往左的解析顺序可以减少选择器匹配的次数。</p><p>dom 树和 css 会合成为 render 树，这个操作实际上就是是需要将 css 附着到 dom 树上，因此需要根据选择器提供的信息对 dom 树进行遍历，才能将样式成功附着到对应的 dom 元素上。</p><p>当 dom 树比较复杂的时候，可以发现从右到左解析能够有效减少回溯次数提升性能。</p><h2 id="import" tabindex="-1">@import <a class="header-anchor" href="#import" aria-hidden="true">#</a></h2><p>css 样式文件有两种引入方式。一种是<strong>link</strong>元素，另一种这是 <strong>@import</strong>。应当尽量避免使用 <strong>@import</strong>，因为 <strong>@import</strong> 会影响浏览器的并行下载，使得页面在加载的时候增加额外的延迟，增添了额外的往返耗时。而且多个 <strong>@import</strong>可能会导致下载顺序紊乱。比如一个 css 文件 <strong>index.css</strong> 包含了以下内容：<strong>@import url(&quot;reset.css&quot;)</strong>。那么浏览器就必须先把 <strong>index.css</strong> 下载、解析和执行后，才下载、解析和执行第二个文件 reset.css。简单的解决方法是使用 <strong>link 元素</strong> 替代 <strong>@import</strong>。</p><h2 id="css-引入的方式有哪些-link-和-import-的区别是" tabindex="-1">CSS 引入的方式有哪些？link 和@import 的区别是？ <a class="header-anchor" href="#css-引入的方式有哪些-link-和-import-的区别是" aria-hidden="true">#</a></h2><h3 id="引入方式" tabindex="-1">引入方式 <a class="header-anchor" href="#引入方式" aria-hidden="true">#</a></h3><p>有四种：内联（元素上的 style 属性）、外链（link）、导入（@import）</p><h3 id="link-和-import-的区别" tabindex="-1">link 和@import 的区别 <a class="header-anchor" href="#link-和-import-的区别" aria-hidden="true">#</a></h3><ul><li>link 是 XHTML 标签，除了加载 css 外，还可以定义 RSS 等其他事物；@import 属于 css 范畴，只能加载 css。</li><li>link 引用 css 时，在页面载入时同时加载；@import 需要页面网页完全载入以后再加载。</li><li>link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。</li><li>link 支持使用 Javascript 控制 DOM 去改变样式；而@import 不支持。</li></ul><h2 id="css-的加载会阻塞-dom-树解析和渲染吗-为什么" tabindex="-1">CSS 的加载会阻塞 DOM 树解析和渲染吗？为什么？ <a class="header-anchor" href="#css-的加载会阻塞-dom-树解析和渲染吗-为什么" aria-hidden="true">#</a></h2><p><img src="https://s1.ax1x.com/2020/03/29/GVEpWR.png" alt=""></p><ol><li>从上面这个图上，我们可以看到，浏览器渲染过程如下：</li><li>解析 HTML，生成 DOM 树，解析 CSS，生成 CSSOM 树</li><li>将 DOM 树和 CSSOM 树结合，生成渲染树(Render Tree)</li><li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li><li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li><li>Display:将像素发送给 GPU，展示在页面上。</li></ol><p>所以</p><ul><li><p>CSS 加载不会影响 DOM 树的解析 因为 DOM 树和 CSS 树是分开生成解析的</p></li><li><p>CSS 的加载会阻塞 DOM 树的渲染，因为 CSS 的下载完成后解析成 CSSOM 与 DOM 生成渲染树后，页面才会渲染，绘制出来</p></li></ul><h2 id="回流和重绘" tabindex="-1">回流和重绘 <a class="header-anchor" href="#回流和重绘" aria-hidden="true">#</a></h2><p>回流必将引起重绘，重绘不一定会引起回流</p><h3 id="回流" tabindex="-1">回流 <a class="header-anchor" href="#回流" aria-hidden="true">#</a></h3><p>当 <strong>Render Tree</strong> 中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><h3 id="重绘" tabindex="-1">重绘 <a class="header-anchor" href="#重绘" aria-hidden="true">#</a></h3><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：<strong>color、background-color、visibility</strong>等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><h3 id="如何避免" tabindex="-1">如何避免 <a class="header-anchor" href="#如何避免" aria-hidden="true">#</a></h3><ul><li>避免使用<strong>table</strong>布局</li><li>尽可能在<strong>DOM</strong>树的最末端改变<strong>class</strong></li><li>避免设置多层内联样式</li><li>合并多次对 DOM 和样式的修改，然后一次处理掉</li><li>隐藏元素，应用修改，重新显示即 使元素脱离文档流、对其进行多次修改、将元素带回到文档中</li><li>将动画效果应用在<strong>position</strong>属性为<strong>absolute</strong>或<strong>fixed</strong>的元素上</li><li>避免使用<strong>css</strong>表达式（例如：<strong>calc()</strong>）</li></ul><h1 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-hidden="true">#</a></h1><h2 id="new-调用函数的过程" tabindex="-1">new 调用函数的过程 <a class="header-anchor" href="#new-调用函数的过程" aria-hidden="true">#</a></h2><ol><li>创建（或者说构造）一个全新的对象</li><li>这个对象会被执行 prototype 连接</li><li>这个新对象会绑定到函数调用的 this</li><li>如果函数没有返回对象，那么 new 表达式中的函数调用会自动返回这个新对象</li></ol><h2 id="原型-实例" tabindex="-1">原型/实例 <a class="header-anchor" href="#原型-实例" aria-hidden="true">#</a></h2><ol><li><p>你不知道的 js 中的定义：在几乎所有的对象创建时都会有一个 <strong>prototype</strong> 属性，它是 js 中一个内置的非空默认对象，其实就是对其他对象的引用</p></li><li><p>在红宝书第三版中的定义：无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 <strong>prototype</strong> 属性，这个属性指向函数的原型对象。</p></li><li><p>在对于访问对象上的属性时，第一步会检查属性本身是否拥有这个属性，否则就会查找对象的原型链。这个过程会持续直到找到匹配的值，如果最后还是没有则返回 <strong>undefined</strong></p></li><li><p>在 Chrome、Firefox 中对象还会有 ** _proto_ ** 属性指向该对象的父类的原型。</p></li><li><p>通过构造函数和 new 创建出来的对象，便是实例。 实例通过 ** _proto_ ** 指向其构造函数的原型，通过 <strong>constructor</strong> 指向构造函数。</p></li></ol><p><img src="https://ftp.bmp.ovh/imgs/2021/04/a5b7c2c7c9e52ccc.png" alt=""></p><p><img src="https://s1.ax1x.com/2020/04/04/G0N1FP.png" alt=""></p><p><a href="https://juejin.im/post/5835853f570c35005e413b19" target="_blank" rel="noreferrer">参考链接</a></p><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h2><p>实例.constructor 指向其构造函数，实际上.constructor 是在构造函数的 prototype 上的一个属性，而构造函数.prototype.constructor 默认指向其本身。 所以实例.constructor 只是通过默认的 prototype 委托指向 其构造函数，</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-hidden="true">#</a></h2><p>在你不知道的 js 中提到：实际上，new 会劫持所有普通函数并且用构造对象的形式来调用它。换句话说，在 js 中对于“构造函数”最准确的解释是，所有带 new 的函数调用。</p><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-hidden="true">#</a></h2><p>闭包最常见的形式就是函数嵌套函数了。</p><ul><li>在<strong>你不知道的 js</strong>中对闭包的定义是：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</li><li>在 <strong>JavaScript 高级程序设计</strong>中对闭包的定义是：闭包是指有权访问另一个函数作用域中的变量的函数。</li><li>在<strong>MDN</strong>对闭包的定义为：闭包是指那些能够访问自由变量的函数。 （其中自由变量，指在函数中使用的，但既不是函数参数 arguments 也不是函数的局部变量的变量，其实就是另外一个函数作用域中的变量。）</li></ul><p>通常在函数的执行完毕后，函数的整个内部作用域都会因垃圾回收机制而被销毁，而拜 内嵌函数 所声明的位置所赐，它拥有涵盖 外部函数 内部作用域的闭包，使得该作用域能够一 直存活，以供 内嵌函数 在之后任何时间进行引用。 内嵌函数 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><h2 id="赋值和深浅拷贝" tabindex="-1">赋值和深浅拷贝 <a class="header-anchor" href="#赋值和深浅拷贝" aria-hidden="true">#</a></h2><ul><li><p>赋值</p><ul><li>直接用 <strong>=</strong> 赋值 <ul><li>基础类型原数据不受影响</li><li>引用类型原数据受影响</li></ul></li></ul></li><li><p>浅拷贝：以赋值的形式拷贝引用对象，但仍然指向同一个地址，修改时原对象也会受到影响。</p><ul><li><strong>Object.assign</strong></li><li>拓展运算符 <ul><li>如果引用对象的值是基础类型则原数据不受影响</li><li>如果引用对象的值是引用类型则原数据受影响</li></ul></li></ul></li><li><p>深拷贝：完全拷贝一个新对象，修改时原对象不会受到影响</p><ul><li><strong>JSON.parse(JSON.stringify(...))</strong><ul><li>不可用于具有循环引用的对象</li><li>当值为函数、undefined 或 symbol 时，无法拷贝</li></ul></li><li>递归进行逐一赋值</li></ul></li></ul><p>用递归实现深拷贝的思路就是先判断需要拷贝的值是引用类型还是基础类型。如果是引用类型则进行递归赋值，是基础类型则直接赋值</p><p><a href="https://juejin.im/post/59ac1c4ef265da248e75892b" target="_blank" rel="noreferrer">参考资料</a></p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-hidden="true">#</a></h2><h3 id="commonjs" tabindex="-1">CommonJs <a class="header-anchor" href="#commonjs" aria-hidden="true">#</a></h3><p>在 node13.12 之前的版本都是采用 CommonJs 的规范。目前 npm 模板中使用较多</p><ul><li>优点：服务器端模块重用，NPM 中模块包多，有将近 20 万个</li><li>缺点：加载模块是同步的，只有加载完成后才能执行后面的操作，也就是当要用到该模块了，现加载现用，不仅加载速度慢，而且还会导致性能、可用性、调试和跨域访问等问题。Node.js 主要用于服务器编程，加载的模块文件一般都存在本地硬盘，加载起来比较快，不用考虑异步加载的方式，因此,CommonJS 规范比较适用。</li></ul><h3 id="amd" tabindex="-1">AMD <a class="header-anchor" href="#amd" aria-hidden="true">#</a></h3><p>鉴于浏览器的特殊情况，又出现了一个规范，这个规范呢可以实现异步加载依赖模块，并且会提前加载那就是 AMD 规范。</p><ul><li>优点：在浏览器环境中异步加载模块；并行加载多个模块</li><li>缺点：开发成本高，代码阅读和书写比较困难</li><li>实现：Require.js</li></ul><h3 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-hidden="true">#</a></h3><p>Common Module Definition 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。</p><ul><li><p>优点：都用于浏览器编程，依赖就近，延迟执行，可以很容易在 Node.js 中运行</p></li><li><p>缺点：依赖 SPM 打包，模块的加载逻辑偏重；</p></li><li><p>实现：Sea.js</p></li></ul><h3 id="es6-module" tabindex="-1">ES6 module <a class="header-anchor" href="#es6-module" aria-hidden="true">#</a></h3><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</p><h3 id="es6-和-commonjs-的区别" tabindex="-1">ES6 和 commonjs 的区别 <a class="header-anchor" href="#es6-和-commonjs-的区别" aria-hidden="true">#</a></h3><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</p><h2 id="节流和防抖" tabindex="-1">节流和防抖 <a class="header-anchor" href="#节流和防抖" aria-hidden="true">#</a></h2><p>防抖与节流函数是一种最常用的 高频触发优化方式，能对性能有较大的帮助。</p><ul><li>防抖：将多次高频率操作优化为只在最后一次执行，通常使用场景是：用户输入，只需执行最后一次输入的回调。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounce</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">wait</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">immediate</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeout</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reuslt</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">immediate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callNow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">timeout</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wait</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">callNow</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wait</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>节流：每隔一段时间后执行一次，也就是降低执行频率，将高频操作优化成低频操作，通常用于：滚动条事件或 resize 事件</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">throttle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">wait</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">immediate</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callNow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">immediate</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">callNow</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">callNow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wait</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="手写-call、apply、bind" tabindex="-1">手写 call、apply、bind <a class="header-anchor" href="#手写-call、apply、bind" aria-hidden="true">#</a></h2><h3 id="call" tabindex="-1">call <a class="header-anchor" href="#call" aria-hidden="true">#</a></h3><p>ES6 方式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">myCall</span><span style="color:#A6ACCD;">(context</span><span style="color:#89DDFF;">,...</span><span style="color:#A6ACCD;">args)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// this 参数可以传 null，当为 null 的时候，视为指向 window</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 将函数设为对象的值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 声明返回结果变量并赋值为函数执行结果</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 删除该函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 返回结果</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>普通方式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">myCall</span><span style="color:#A6ACCD;">(context)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// this 参数可以传 null，当为 null 的时候，视为指向 window</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 将函数设为对象的值</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 收集传入参数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">arguments[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">eval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">contex.fn(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 利用数组和字符串拼接时会转换成字符串的特效将参数传入</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-hidden="true">#</a></h3><p>ES6 方式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">myApply</span><span style="color:#A6ACCD;">(context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">arr)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>普通方式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">arr[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">eval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">context.fn(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-hidden="true">#</a></h3><p>es6</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">myBind</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">contex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">newFn</span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">newFnArgs</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">newFn</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">newFnArgs</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">newFnArgs</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>普通方式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">myBind</span><span style="color:#A6ACCD;">(context)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Function.prototype.bind - what is trying to be bound is not callable</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 获取myBind函数从第二个参数到最后一个参数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fNOP</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fBound</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 这个时候的arguments是指bind返回的函数传入的参数</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bindArgs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">fNOP</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bindArgs</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">fNOP</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">fBound</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fNOP</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fBound</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="什么是提升" tabindex="-1">什么是提升 <a class="header-anchor" href="#什么是提升" aria-hidden="true">#</a></h2><h3 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre></div><p>当你看到 var a = 2; 时，可能会认为这是一个声明。 但 JavaScript 实际上会将其看成两个 声明:var a;和 a = 2;。第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在 原地等待执行阶段。</p><p>所以执行顺序应该是</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span></code></pre></div><h3 id="函数提升" tabindex="-1">函数提升 <a class="header-anchor" href="#函数提升" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>函数同样存在提升</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 不是 ReferenceError, 而是 TypeError!</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>函数声明会被提升，但是函数表达式却不会被提升。</p><h3 id="函数优先" tabindex="-1">函数优先 <a class="header-anchor" href="#函数优先" aria-hidden="true">#</a></h3><p>函数声明和变量声明都会被提升。但是一个值得注意的细节(这个细节可以出现在有多个 “重复”声明的代码中)是函数会首先被提升，然后才是变量。</p><h3 id="暂时性死区-temporal-dead-zone" tabindex="-1">暂时性死区（Temporal Dead Zone） <a class="header-anchor" href="#暂时性死区-temporal-dead-zone" aria-hidden="true">#</a></h3><p>与通过 var 声明的有初始化值 undefined 的变量不同，通过 let 声明的变量直到它们的定义被执行时才初始化。在变量初始化前访问该变量会导致 ReferenceError。该变量处在一个<strong>自块顶部到初始化处理的“暂存死区”中</strong>。</p><h2 id="如何实现继承" tabindex="-1">如何实现继承 <a class="header-anchor" href="#如何实现继承" aria-hidden="true">#</a></h2><h3 id="es5-寄生组合继承" tabindex="-1">es5 寄生组合继承 <a class="header-anchor" href="#es5-寄生组合继承" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Parent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getValue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Child</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Parent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Child</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 实例的constructor指向其构造函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">configurable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> child </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Child</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getValue</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#A6ACCD;">child </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Parent</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="es6-class-组合继承" tabindex="-1">es6 class 组合继承 <a class="header-anchor" href="#es6-class-组合继承" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Parent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getValue</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Child</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Parnet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">super</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="实现-add-1-1-add-2-3-7" tabindex="-1">实现 add(1,1).add(2,3) // 7 <a class="header-anchor" href="#实现-add-1-1-add-2-3-7" aria-hidden="true">#</a></h2><p>这里一并实现柯里化和链式调用，关键点在于访问函数时会调用其**toString()**方法，以及利用闭包把前一次执行结果保存并计算返回</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 这里利用闭包保存传入参数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 改写toString为计算返回值</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">add</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="eventloop" tabindex="-1">EventLoop <a class="header-anchor" href="#eventloop" aria-hidden="true">#</a></h2><h3 id="简单概念回答" tabindex="-1">简单概念回答 <a class="header-anchor" href="#简单概念回答" aria-hidden="true">#</a></h3><p>JavaScript 是一门单线程非阻塞的语言，所以意味着只有一个主线程去执行任务或者说执行代码。那么任务又分为同步任务和异步任务，在 js 执行同步任务时，会创建上下文，然后将任务入栈，按照先进后出的顺序执行，而当遇到异步任务时就会按照宏任务和微任务的分类分别放入不同的队列。被放入队列后不会立即执行而是等到主线程闲置时，主线程会去查找队列中是否有任务，如果有就按照队列先进先出的顺序放入执行栈，然后执行其中的同步代码，如此反复就形成了一个循环，而这个循环就是事件循环也就是 eventloop。</p><h3 id="宏任务与微任务" tabindex="-1">宏任务与微任务 <a class="header-anchor" href="#宏任务与微任务" aria-hidden="true">#</a></h3><p>个人理解的执行顺序：</p><ol><li><p>代码从开始执行调用一个全局执行栈，script 标签作为宏任务执行</p></li><li><p>执行过程中同步代码立即执行，异步代码放到任务队列中，任务队列存放有两种类型的异步任务，宏任务队列，微任务队列。</p></li><li><p>同步代码执行完毕也就意味着第一个宏任务执行完毕(script)</p><ul><li><p>1 先查看任务队列中的微任务队列是否存在宏任务执行过程中所产生的微任务</p><ul><li>​1-1 有的话就将微任务队列中的所有微任务清空</li><li>1-2 微任务执行过程中所产生的微任务放到微任务队列中，在此次执行中一并清空</li></ul></li><li><p>2 如果没有再看看宏任务队列中有没有宏任务，有的话执行，没有的话事件轮询第一波结束</p><ul><li>​2-1 执行过程中所产生的微任务放到微任务队列</li><li>2-2 完成宏任务之后执行清空微任务队列的代码</li></ul></li></ul></li></ol><h1 id="vue" tabindex="-1">VUE <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h1><h2 id="什么是-vue" tabindex="-1">什么是 vue <a class="header-anchor" href="#什么是-vue" aria-hidden="true">#</a></h2><p>Vue 是一套用于构建用户界面的渐进式框架。Vue 被设计为可以自底向上逐层应用。是一个不完全遵循 MVVM 的框架。</p><h2 id="v-show-与-v-if-有什么区别" tabindex="-1">v-show 与 v-if 有什么区别 <a class="header-anchor" href="#v-show-与-v-if-有什么区别" aria-hidden="true">#</a></h2><p><strong>v-if</strong>是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么都不做直到条件第一次为真时才会渲染</p><p><strong>v-show</strong>不管初始条件是什么，元素总是会被渲染，只是简单地基于 css 属性<strong>display</strong>属性进行切换</p><h2 id="vue-的父组件和子组件生命周期钩子函数执行顺序" tabindex="-1">vue 的父组件和子组件生命周期钩子函数执行顺序 <a class="header-anchor" href="#vue-的父组件和子组件生命周期钩子函数执行顺序" aria-hidden="true">#</a></h2><ul><li><p>加载渲染过程</p><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p></li><li><p>子组件更新过程</p><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p></li><li><p>父组件更新过程</p><p>父 beforeUpdate -&gt; 父 updated</p></li><li><p>销毁过程</p><p>父 beforeDestory -&gt; 子 beforeDestory -&gt; 子 destoryed -&gt; 父 destoryed</p></li></ul><h2 id="computed-和-watch-的区别和运用场景" tabindex="-1">computed 和 watch 的区别和运用场景 <a class="header-anchor" href="#computed-和-watch-的区别和运用场景" aria-hidden="true">#</a></h2><ul><li><p>功能上：computed 是计算属性，也就是依赖其它的属性计算所得出最后的值。watch 是去监听一个值的变化，然后执行相对应的函数</p></li><li><p>使用上：computed 中的函数必须要用 return 返回；watch 的回调里面会传入监听属性的新旧值，通过这两个值可以做一些特定的操作，不是必须要用 return</p></li><li><p>性能上：computed 中的函数所依赖的属性没有发生变化，那么调用当前的函数的时候会从缓存中读取，而 watch 在每次监听的值发生变化的时候都会执行回调</p></li><li><p>场景上：computed：当一个属性受多个属性影响的时候，例子：购物车商品结算；watch：当一条数据影响多条数据的时候，例子：搜索框</p></li></ul><h2 id="vue-js-源码入口主要做了些什么处理" tabindex="-1">Vue.js 源码入口主要做了些什么处理 <a class="header-anchor" href="#vue-js-源码入口主要做了些什么处理" aria-hidden="true">#</a></h2><p>在 main.js 中实例化 Vue 时，会调用绑定在绑定在 vue 实例上的_init 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Vue</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vue is a constructor and should be called with the \`new\` keyword</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">_init</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">options</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>_init 方法合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 data、props、computed、watcher 等等。</p><h2 id="vue-js-中的数据劫持是怎么实现的-浏览器兼容性呢" tabindex="-1">Vue.js 中的数据劫持是怎么实现的？浏览器兼容性呢 <a class="header-anchor" href="#vue-js-中的数据劫持是怎么实现的-浏览器兼容性呢" aria-hidden="true">#</a></h2><p>核心逻辑是通过 <strong>Object.defineProperty(...)</strong> 去改写数据的 <strong>get/set</strong> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">customSetter</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">shallow</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dep</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Dep</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">configurable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// cater for pre-defined getter/setters</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">get</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">property</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">set</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> ((</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">getter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">childOb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">shallow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactiveGetter</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">childOb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">childOb</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">dependArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactiveSetter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/* eslint-disable no-self-compare */</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">newVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">newVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newVal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/* eslint-enable no-self-compare */</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">customSetter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">customSetter</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// #7981: for accessor properties without setter</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">getter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">setter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">setter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">setter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newVal</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newVal</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">childOb</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">shallow</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><img src="https://s1.ax1x.com/2020/05/03/YSkj56.png" alt=""></p><h2 id="vue-js-中的依赖收集是怎么处理的-和闭包有什么关联吗" tabindex="-1">Vue.js 中的依赖收集是怎么处理的？和闭包有什么关联吗？ <a class="header-anchor" href="#vue-js-中的依赖收集是怎么处理的-和闭包有什么关联吗" aria-hidden="true">#</a></h2><h3 id="依赖收集" tabindex="-1">依赖收集 <a class="header-anchor" href="#依赖收集" aria-hidden="true">#</a></h3><p>首先收集依赖的核心是 Observer 类（数据劫持）和 Watcher 类（订阅者）以及 Dep 类（发布者）</p><ol><li><p>在组件 mount 前，会通过实例化 Observer 类进行数据劫持改写数据的<strong>get/set</strong>方法</p><p>this._init-&gt;initState-&gt;initData-&gt;observe-&gt;实例化 Observer 类-&gt;observeArray/walk-&gt;defineReactive-&gt;改写 get/set</p></li><li><p>在组件 mount 的时候会实例化 watcher 类，在构造函数中触发相关逻辑去收集依赖</p><p>vm.$mount-&gt;mountComponent-&gt;new Watcher-&gt;Watcher.prototype.get-&gt;pushTarget(Dep.target 赋值为渲染 watcher)-&gt;updateComponent-&gt;vm._update(vm._render(), hydrating)</p><p>这个方法会生成 渲染 VNode，并且在这个过程中会对 vm 上的数据访问，这个时候就触发了数据对象的 getter。</p></li></ol><blockquote><p>那么每个对象值的 getter 都持有一个 dep，在触发 getter 的时候会调用 dep.depend() 方法，也就会执行 Dep.target.addDep(this)。刚才我们提到这个时候 Dep.target 已经被赋值为渲染 watcher，那么就执行到 addDep 方法</p></blockquote><h3 id="和闭包有什么关联吗" tabindex="-1">和闭包有什么关联吗 <a class="header-anchor" href="#和闭包有什么关联吗" aria-hidden="true">#</a></h3><p>在执行<strong>defineReactive</strong>方法时会实例化一个 Dep 类，而改写<strong>get</strong>方式时对 Dep 的实例 有访问到从而形成了闭包</p><h2 id="vue-js-中的模版解析需要经历哪几个阶段" tabindex="-1">Vue.js 中的模版解析需要经历哪几个阶段？ <a class="header-anchor" href="#vue-js-中的模版解析需要经历哪几个阶段" aria-hidden="true">#</a></h2><ol><li>parse 解析模板字符串生成 AST</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>optimize 优化语法树、标记静态节点、静态根</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">optimize</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>generate 将最终的 AST 转化为 render 函数字符串</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>
<span class="line"></span></code></pre></div><h2 id="vue-js-中的-虚拟节点优势是什么" tabindex="-1">Vue.js 中的 虚拟节点优势是什么？ <a class="header-anchor" href="#vue-js-中的-虚拟节点优势是什么" aria-hidden="true">#</a></h2><ul><li><strong>保证性能下限</strong>：框架的虚拟需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所有它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限</li><li><strong>无需手动操作 DOM</strong>：我们只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和数据双向绑定，帮我们以可预期的方式更新视图，极大提高了开发效率</li><li><strong>跨平台</strong>：虚拟 DOM 本质上是 JS 对象，而 DOM 与平台强相关，相比之下虚拟 dom 可以进行更方便地跨平台操作，例如 ssr，weex 开发</li></ul><h2 id="props、data、compute、watch、methods、created、mounted-的初始化顺序" tabindex="-1">props、data、compute、watch、methods、created、mounted 的初始化顺序 <a class="header-anchor" href="#props、data、compute、watch、methods、created、mounted-的初始化顺序" aria-hidden="true">#</a></h2><ol><li>props</li><li>methods</li><li>data</li><li>compute</li><li>watch</li><li>created</li><li>mounted</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">initLifecycle</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#82AAFF;">initEvents</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#82AAFF;">initRender</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#82AAFF;">callHook</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeCreate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">initInjections</span><span style="color:#A6ACCD;">(vm) </span><span style="color:#676E95;font-style:italic;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#82AAFF;">initState</span><span style="color:#A6ACCD;">(vm)</span></span>
<span class="line"><span style="color:#82AAFF;">initProvide</span><span style="color:#A6ACCD;">(vm) </span><span style="color:#676E95;font-style:italic;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#82AAFF;">callHook</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">created</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initState</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_watchers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$options</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">initProps</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">methods</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">initMethods</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">methods</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initData</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">observe</span><span style="color:#F07178;">((</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* asRootData */</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">computed</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">initComputed</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">computed</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">watch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">watch</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nativeWatch</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">initWatch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">watch</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="slot-是什么-有什么作用-原理是什么" tabindex="-1">slot 是什么？有什么作用？原理是什么？ <a class="header-anchor" href="#slot-是什么-有什么作用-原理是什么" aria-hidden="true">#</a></h2><h3 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-hidden="true">#</a></h3><p>slot 又名插槽，是 Vue 的内容分发机制，组件内部的模板引擎使用 slot 元素作为承载分发内容的出口。插槽 slot 是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。</p><h3 id="有什么作用" tabindex="-1">有什么作用 <a class="header-anchor" href="#有什么作用" aria-hidden="true">#</a></h3><p>slot 分三类：默认插槽、具名插槽、作用域插槽</p><ol><li><p>默认插槽：当 slot 没有指定 name 值时的一个默认显示插槽。一个组件内只有一个默认插槽</p></li><li><p>具名插槽：带有 name 值的插槽，由父元素向 slot 便签传入 name 值来决定显示哪一个具名插槽。一个组件可以有多个具名插槽</p></li><li><p>作用域插槽：默认插槽、具名插槽的变体，该插槽的不同点在于子组件渲染作用域插槽时，可以将子组件的数据传递给父组件，让父组件根据子组件传递过来的数据决定如何渲染该插槽</p></li></ol><h3 id="原理是什么" tabindex="-1">原理是什么？ <a class="header-anchor" href="#原理是什么" aria-hidden="true">#</a></h3><p>首先 vue 的编译阶段需要经过 parse-optimize-codegen 三个阶段。而编译的顺序是先编译父组件，再编译子组件。</p><h4 id="具名插槽和匿名匿名插槽" tabindex="-1">具名插槽和匿名匿名插槽 <a class="header-anchor" href="#具名插槽和匿名匿名插槽" aria-hidden="true">#</a></h4><h5 id="父组件" tabindex="-1">父组件 <a class="header-anchor" href="#父组件" aria-hidden="true">#</a></h5><ol><li>parse 阶段时，会执行 <strong>processSlotContent</strong>方法，当解析到标签上面有<strong>slot</strong>属性时，会给对应的 AST 元素节点添加<strong>slotTarget</strong>属性</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> slotTarget </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBindingAttr</span><span style="color:#A6ACCD;">(el</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">slot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (slotTarget) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slotTarget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slotTarget</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;default&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slotTarget</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// preserve slot as an attribute for native shadow DOM compat</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// only for non-scoped slots.</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">template</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slotScope</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">addAttr</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">slot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">slotTarget</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>在 codeGen 阶段，会给 data 添加一个 slot 属性，并指向 slotTarget，之后会用到</li></ol><h5 id="子组件" tabindex="-1">子组件 <a class="header-anchor" href="#子组件" aria-hidden="true">#</a></h5><ol><li>在 parse 阶段会执行 <strong>processSlotOutlet</strong>，当遇到<strong>slot</strong>标签时会获取其<strong>name</strong>属性给到对应的 AST 元素节点</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processSlotOutlet</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">slot</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slotName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getBindingAttr</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>在 codegen 阶段会执行<strong>genSlot</strong>，<strong>children</strong>则是 slot 标签开始和闭合标签包裹的内容。<strong>_t</strong> 函数对应的就是 <strong>renderSlot</strong> 方法</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> slotName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> el</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slotName </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;default&quot;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> children </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">genChildren</span><span style="color:#A6ACCD;">(el</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">_t(</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">slotName</span><span style="color:#89DDFF;">}\${</span><span style="color:#A6ACCD;">children </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;}\`</span></span>
<span class="line"></span></code></pre></div><p>实际上，在编译子组件的之前会执行<strong>initRender</strong></p><p>首先，VUE 是使用到了虚拟 DOM 的，那编译成虚拟 DOM 的大致过程有三步，parse 生成 AST，optimize 优化 AST，codeGen 生成虚拟 DOM，而 VUE 内部则是有个 Vnode 类去描述虚拟 DOM 的。那么在其编译过程顺序是先父后子的，在父组件的 parse 过程中遇到标签具有 slot 属性时就会为其 AST 元素对象添加标识。</p><h2 id="template-预编译是什么" tabindex="-1">template 预编译是什么？ <a class="header-anchor" href="#template-预编译是什么" aria-hidden="true">#</a></h2><h2 id="说说-vue3-0-和-vue2-0-有什么区别" tabindex="-1">说说 Vue3.0 和 Vue2.0 有什么区别 <a class="header-anchor" href="#说说-vue3-0-和-vue2-0-有什么区别" aria-hidden="true">#</a></h2><ol><li><p>分离内部模块。新的代码架构下为源码提供了更好的可维护性，并允许终端用户通过 tree-shaking 的形式将减少一半的运行时体积。</p></li><li><p>Vue3.0 使用 typescript 重构了整个项目，对于类型支持更加友好。</p></li><li><p>移除了一些冷门的 API（比如 filter、inline-template、v-on:keyCode）</p></li><li><p>数据劫持的优化，由<strong>Object.prototype.definePrototype</strong>改为<strong>Proxy</strong></p><ul><li>可直接监听数组类型的数据变化。</li><li>监听的目标为对象本身，不需要像<strong>Object.prototype.definePrototype</strong>一样遍历每个属性，在访问对象时才会变成响应式，有一定的性能提升。</li><li>支持更多的类型劫持</li></ul></li><li><p>优化了 diff 算法、虚拟 DOM。</p></li><li><p>新增 Compisition API</p></li></ol><h2 id="composition-api-与-react-hook-的区别" tabindex="-1">Composition API 与 React Hook 的区别 <a class="header-anchor" href="#composition-api-与-react-hook-的区别" aria-hidden="true">#</a></h2><p>从 React Hook 的实现角度看，React Hook 是根据 useState 调用的顺序来决定下一次重新渲染时的 state 是来源于那个 useState，所以有以下限制：</p><ul><li>不能在循环、条件、嵌套函数中调用 Hook；</li><li>必须保证总是在 React 函数的顶层调用 Hook；</li><li>useEffect、useMemo 等函数必须手动确定依赖关系。</li></ul><p>而 composition API 是基于 Vue 的响应式实现的，与 React Hook 相比</p><ul><li>一般来说更符合惯用的 JS 代码的直觉；</li><li>不需要顾虑调用顺序，也可以用在条件语句中；</li><li>不会再每次渲染时重复执行，以降低垃圾回收的压力；</li><li>不存在嵌套函数导致子组件永远更新的问题，也不需要<strong>useCallback</strong>；</li><li>不存在忘记记录依赖的问题，也不需要<strong>useEffect</strong>和<strong>useMemo</strong>并手动传入依赖。</li></ul><h2 id="nexttick-知道吗-实现原理是什么" tabindex="-1">nextTick 知道吗，实现原理是什么？ <a class="header-anchor" href="#nexttick-知道吗-实现原理是什么" aria-hidden="true">#</a></h2><h3 id="是什么-1" tabindex="-1">是什么 <a class="header-anchor" href="#是什么-1" aria-hidden="true">#</a></h3><p>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。所以当我们想基于更新后的 DOM 来处理逻辑，那么就可以用<strong>Vue.nextTick(callback)</strong>。</p><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h3><h2 id="vue-js-中的-m-v-vm-分别指什么" tabindex="-1">Vue.js 中的 M/V/VM 分别指什么 <a class="header-anchor" href="#vue-js-中的-m-v-vm-分别指什么" aria-hidden="true">#</a></h2><p><img src="https://s1.ax1x.com/2020/09/10/wY1kid.png" alt="wY1kid.png"></p><ul><li>Model: 组件中的 data、props 属性</li><li>View: 组件中的 template 部分</li><li>Viewmodel：继承自 vue 的组件实例</li></ul><p><strong>严格的 MVVM 要求 View 不能和 Model 直接通信，而 Vue 在组件提供了$refs 这个属性，让 Model 可以直接操作 View，违反了这一规定，所以说 Vue 没有完全遵循 MVVM。</strong></p><h1 id="ts" tabindex="-1">TS <a class="header-anchor" href="#ts" aria-hidden="true">#</a></h1><h2 id="typescript-与-javascript-的区别" tabindex="-1">TypeScript 与 JavaScript 的区别 <a class="header-anchor" href="#typescript-与-javascript-的区别" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">TypeScript</th><th style="text-align:center;">JavaScript</th></tr></thead><tbody><tr><td style="text-align:center;">JavaScript 的超集用于解决大型项目的代码复杂性</td><td style="text-align:center;">一种脚本语言，用于创建动态网页</td></tr><tr><td style="text-align:center;">可以在编译期间发现并纠正错误</td><td style="text-align:center;">作为一种解释型语言，只能在运行时发现错误</td></tr><tr><td style="text-align:center;">强类型，支持静态和动态类型</td><td style="text-align:center;">弱类型，没有静态类型选项</td></tr><tr><td style="text-align:center;">最终被编译成 JavaScript 代码，使浏览器可以理解</td><td style="text-align:center;">可以直接在浏览器中使用</td></tr></tbody></table><h2 id="js-项目如何升级为-ts-有何影响" tabindex="-1">js 项目如何升级为 ts？有何影响？ <a class="header-anchor" href="#js-项目如何升级为-ts-有何影响" aria-hidden="true">#</a></h2><h2 id="ts-基础类型都哪些-他们跟-js-的区别" tabindex="-1">ts 基础类型都哪些，他们跟 js 的区别 <a class="header-anchor" href="#ts-基础类型都哪些-他们跟-js-的区别" aria-hidden="true">#</a></h2><h2 id="ts-为什么会流行-与-ecma-新规范的关系" tabindex="-1">ts 为什么会流行？与 ECMA 新规范的关系？ <a class="header-anchor" href="#ts-为什么会流行-与-ecma-新规范的关系" aria-hidden="true">#</a></h2><h2 id="tslint-都能配置哪些功能-对开发流程有何影响" tabindex="-1">tslint 都能配置哪些功能？对开发流程有何影响？ <a class="header-anchor" href="#tslint-都能配置哪些功能-对开发流程有何影响" aria-hidden="true">#</a></h2><h2 id="如何使用-js-实现类型约束-枚举等特性么" tabindex="-1">如何使用 js 实现类型约束，枚举等特性么？ <a class="header-anchor" href="#如何使用-js-实现类型约束-枚举等特性么" aria-hidden="true">#</a></h2><h2 id="如何理解接口-泛型" tabindex="-1">如何理解接口，泛型? <a class="header-anchor" href="#如何理解接口-泛型" aria-hidden="true">#</a></h2><h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h1><h2 id="观察者模式和发布-订阅模式的区别" tabindex="-1">观察者模式和发布-订阅模式的区别 <a class="header-anchor" href="#观察者模式和发布-订阅模式的区别" aria-hidden="true">#</a></h2><h2 id="mvc-mvp-mvvm-的区别" tabindex="-1">MVC/MVP/MVVM 的区别 <a class="header-anchor" href="#mvc-mvp-mvvm-的区别" aria-hidden="true">#</a></h2><p>MVC,MVP 和 MVVM 都是用来解决界面呈现和逻辑代码分离而出现的模式。</p><h3 id="mvc" tabindex="-1">MVC <a class="header-anchor" href="#mvc" aria-hidden="true">#</a></h3><ul><li>M: 模型（model）数据保存</li><li>V: 视图（view）用户界面</li><li>C: 控制器（controller）业务逻辑</li></ul><p>各部分之间的通信方式如下。</p><p><img src="https://s1.ax1x.com/2020/09/10/wYnNLQ.png" alt="wYnNLQ.png"></p><ol><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ol><h3 id="mvp" tabindex="-1">MVP <a class="header-anchor" href="#mvp" aria-hidden="true">#</a></h3><p>MVP 模式将 Controller 改名为 Presenter，但所负责的仍是业务逻辑，同时改变了通信方向。</p><p><img src="https://s1.ax1x.com/2020/09/10/wYn5Jx.png" alt="wYn5Jx.png"></p><ol><li>各部分之间的通信，都是双向的。</li><li>View 和 Model 不发生联系，都是通过 Presenter 传递。</li></ol><h3 id="mvc-和-mvp-的关系" tabindex="-1">MVC 和 MVP 的关系 <a class="header-anchor" href="#mvc-和-mvp-的关系" aria-hidden="true">#</a></h3><p>MVP 是从 MVC 演变而来的，它们的基本思想相通：Controller/Presenter 负责业务逻辑，Model 提供数据，View 负责显示。</p><p>但是不同点在于：MVP 中 View 和 Model 是不联系的，而 MVC 中 VIew 可以直接从 Model 获取数据</p><h3 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-hidden="true">#</a></h3><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p><p><img src="https://s1.ax1x.com/2020/09/10/wYKdCq.png" alt="wYKdCq.png"></p><p>唯一的区别是，它采用双向绑定（data-binding）：View 的变动，自动反映在 ViewModel，反之亦然。</p><h1 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h1><h2 id="webpack3-和-webpack4-的区别" tabindex="-1">webpack3 和 webpack4 的区别 <a class="header-anchor" href="#webpack3-和-webpack4-的区别" aria-hidden="true">#</a></h2><h1 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-hidden="true">#</a></h1><h1 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-hidden="true">#</a></h1><h2 id="http1-和-http2、http3-的区别" tabindex="-1">HTTP1 和 HTTP2、HTTP3 的区别 <a class="header-anchor" href="#http1-和-http2、http3-的区别" aria-hidden="true">#</a></h2><h2 id="介绍一下-https-和-http-区别" tabindex="-1">介绍一下 HTTPS 和 HTTP 区别 <a class="header-anchor" href="#介绍一下-https-和-http-区别" aria-hidden="true">#</a></h2><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-hidden="true">#</a></h2>`,272),e=[o];function t(r,c,y,F,i,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
