import{_ as s,c as a,o as n,a as l}from"./app.19589106.js";const A=JSON.parse('{"title":"JSBridge简析","description":"","frontmatter":{"title":"JSBridge简析","date":"2020-05-11T17:09:11.000Z","tags":"JS"},"headers":[{"level":2,"title":"H5 调用 NA 方法梳理","slug":"h5-调用-na-方法梳理","link":"#h5-调用-na-方法梳理","children":[]},{"level":2,"title":"NA 调用 H5 方法梳理","slug":"na-调用-h5-方法梳理","link":"#na-调用-h5-方法梳理","children":[]},{"level":2,"title":"目前有两种主要的通信方式：","slug":"目前有两种主要的通信方式","link":"#目前有两种主要的通信方式","children":[]},{"level":2,"title":"设计一个 Native 和 JS 交互的全局桥对象","slug":"设计一个-native-和-js-交互的全局桥对象","link":"#设计一个-native-和-js-交互的全局桥对象","children":[]},{"level":2,"title":"JS 调用 Native","slug":"js-调用-native","link":"#js-调用-native","children":[{"level":3,"title":"Android","slug":"android","link":"#android","children":[]},{"level":3,"title":"ios","slug":"ios","link":"#ios","children":[]}]},{"level":2,"title":"Native 调用 JS","slug":"native-调用-js","link":"#native-调用-js","children":[]},{"level":2,"title":"更完善方案","slug":"更完善方案","link":"#更完善方案","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"JS 调用 Native","slug":"js-调用-native-1","link":"#js-调用-native-1","children":[{"level":3,"title":"Android","slug":"android-1","link":"#android-1","children":[]},{"level":3,"title":"ios","slug":"ios-1","link":"#ios-1","children":[]}]},{"level":2,"title":"Native 调用 JS","slug":"native-调用-js-1","link":"#native-调用-js-1","children":[{"level":3,"title":"Android","slug":"android-2","link":"#android-2","children":[]},{"level":3,"title":"ios","slug":"ios-2","link":"#ios-2","children":[]}]}],"relativePath":"posts/js/js-bridge.md"}'),e={name:"posts/js/js-bridge.md"},p=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h1><p>在公司中，一直是独立负责一个 Cordova+vue 为技术栈的移动端，之前有稍微了解过 JSBridge 的概念，同时面试中也有涉及到所以记录下来。</p><h1 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h1><p>JSBridge，字面意思则是 JavaScript 桥，也就是连接 JS 和 Native 端的桥梁。实际上就是两者之间的通信方式。简单的说，JSBridge 就是定义 Native 和 JS 的通信,Native 只通过一个固定的桥对象调用 JS,JS 也只通过固定的桥对象调用 Native。JSBridge 另一个叫法及大家熟知的 Hybrid app 技术。</p><h2 id="h5-调用-na-方法梳理" tabindex="-1">H5 调用 NA 方法梳理 <a class="header-anchor" href="#h5-调用-na-方法梳理" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">平台</th><th style="text-align:center;">方法</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">Android</td><td style="text-align:center;">shouldOverrideUrlLoading</td><td style="text-align:center;">scheme 拦截方法</td></tr><tr><td style="text-align:center;">Android</td><td style="text-align:center;">addJavascriptInterface</td><td style="text-align:center;">API</td></tr><tr><td style="text-align:center;">Android</td><td style="text-align:center;">onJsAlert()、onJsConfirm()、onJsPrompt（）</td><td style="text-align:center;">API</td></tr><tr><td style="text-align:center;">IOS</td><td style="text-align:center;">拦截 URL</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">IOS(UIwebview)</td><td style="text-align:center;">JavaScriptCore</td><td style="text-align:center;">API 方法，IOS7+ 支持</td></tr><tr><td style="text-align:center;">IOS(WKwebview)</td><td style="text-align:center;">window.webkit.messageHandlers</td><td style="text-align:center;">APi 方法，IOS8+支持</td></tr></tbody></table><h2 id="na-调用-h5-方法梳理" tabindex="-1">NA 调用 H5 方法梳理 <a class="header-anchor" href="#na-调用-h5-方法梳理" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">平台</th><th style="text-align:center;">方法</th><th style="text-align:center;">备注</th></tr></thead><tbody><tr><td style="text-align:center;">Android</td><td style="text-align:center;">loadurl()</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">Android</td><td style="text-align:center;">evaluateJavascript()</td><td style="text-align:center;">Android 4.4 +</td></tr><tr><td style="text-align:center;">IOS(UIwebview)</td><td style="text-align:center;">stringByEvaluatingJavaScriptFromString</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">IOS(UIwebview)</td><td style="text-align:center;">JavaScriptCore</td><td style="text-align:center;">API 方法，IOS7+ 支持</td></tr><tr><td style="text-align:center;">IOS(WKwebview)</td><td style="text-align:center;">evaluateJavaScript:javaScriptString</td><td style="text-align:center;">APi 方法，IOS8+支持</td></tr></tbody></table><h2 id="目前有两种主要的通信方式" tabindex="-1">目前有两种主要的通信方式： <a class="header-anchor" href="#目前有两种主要的通信方式" aria-hidden="true">#</a></h2><p>通过上面两端调用方法梳理表，不难分析出，URL 拦截 &amp; 注入 API 是 安卓和 IOS 比较通用且兼容性较好的方案</p><ol><li>url scheme</li><li>注入 API</li></ol><h1 id="url-scheme" tabindex="-1">url scheme <a class="header-anchor" href="#url-scheme" aria-hidden="true">#</a></h1><p><strong>url scheme</strong>是一种类似 url 的连接，是为了方便 app 直接互相调用设计的，形式和普通的 url 近似。</p><p>以普通网页和 iOS 上的微信作对比：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">网页</th><th style="text-align:center;">应用</th></tr></thead><tbody><tr><td style="text-align:center;">网站首页/打开应用</td><td style="text-align:center;"><a href="http://www.apple.com" target="_blank" rel="noreferrer">http://www.apple.com</a></td><td style="text-align:center;">weixin://</td></tr><tr><td style="text-align:center;">子页面/具体功能</td><td style="text-align:center;"><a href="http://www.apple.com/mac/" target="_blank" rel="noreferrer">http://www.apple.com/mac/</a></td><td style="text-align:center;">weixin://dl/moments</td></tr></tbody></table><p>而我们实际开发中，app 不会注册对应的 scheme，而是由 web 页面通过某种方式触发 scheme（如 iframe.src），然后 Native 用某种方式捕获 url 后触发相应事件</p><h2 id="设计一个-native-和-js-交互的全局桥对象" tabindex="-1">设计一个 Native 和 JS 交互的全局桥对象 <a class="header-anchor" href="#设计一个-native-和-js-交互的全局桥对象" aria-hidden="true">#</a></h2><p>将一个对象挂载到全局对象 window 上，其拥有 3 个方法，3 个变量。</p><p><img src="https://s1.ax1x.com/2020/05/14/YDrmyd.png" alt=""></p><div class="language-JS"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JsBridge</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">uniqueId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 唯一ID</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">responseCallbacks</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 回调函数集合，原生调用了对应API后根据回调ID调用回调函数</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">messageHandlers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 本地注册的方法集合，只有在本地注册的方法才允许原生调用</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// JS端注册本地JS方法，注册后Native可以通过全局对象访问并调用到。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">registerHandlers</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">handlerName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">handler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">messageHandlers</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">handlerName</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handler</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> JS通知Native调用对应api</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">String</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">handleName</span><span style="color:#676E95;font-style:italic;"> Native函数名</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">Object</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#676E95;font-style:italic;"> Native函数所需参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">Function</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">responseCallback</span><span style="color:#676E95;font-style:italic;"> Native调用后的回调</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">callHandler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">handleName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">responseCallback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">responseCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">responseCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">uniqueId</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callbackId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cb_</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">uniqueId</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">_</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">+new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">responseCallbacks</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">callbackId</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">responseCallback</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// url scheme的格式如</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 基本有用信息就是后面的callbackId,handlerName与data</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 原生捕获到这个scheme后会进行分析</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">uri</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">://CUSTOM_PROTOCOL_SCHEME:</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">callbackId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">handlerName</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(data)</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//创建隐藏iframe过程</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">messagingIframe</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">iframe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">messagingIframe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">display</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">none</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">messagingIframe</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//触发scheme</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">messagingIframe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">uri</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">description</span><span style="color:#676E95;font-style:italic;"> Native调用，通过这个方法返回或者回调JS方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">JSON</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">messageJSON</span><span style="color:#676E95;font-style:italic;"> 如果是通知JS进行回调那么key值为：responseID、responseData；如果是主动调用JS方法那么key值为：handleName、data、callbackId</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">_handleMessageFromNative</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">messageJSON</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">messageJSON</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">messageHanlder</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">responseCallback</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 如果是通知JS进行回调那么key值为：responseID、responseData；</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">responseCallback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">responseCallbacks</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseId</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">responseCallback</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">responseCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseData</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">responseCallbacks</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseId</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 如果是主动调用JS方法那么key值为：handleName、data、callbackId</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackId</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callbackResponseId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callbackId</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">messageHandlers</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">callbackId</span><span style="color:#F07178;">]()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">JSbridge </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JsBridge</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="js-调用-native" tabindex="-1">JS 调用 Native <a class="header-anchor" href="#js-调用-native" aria-hidden="true">#</a></h2><div class="language-JS"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 假设Native函数名为testObjcCallback</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handleName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">testObjcCallback</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> cb </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">JS calling handler &quot;testObjcCallback&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">JSBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">callHandler</span><span style="color:#A6ACCD;">(handleName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cb)</span></span>
<span class="line"></span></code></pre></div><p>此时就会使用内部早就创建好的一个隐藏 iframe 来触发 scheme，不同的平台有有其各自的捕获 API</p><h3 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-hidden="true">#</a></h3><p>在 Android 中(WebViewClient 里),通过 shouldoverrideurlloading 可以捕获到 url scheme 的触发。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shouldOverrideUrlLoading</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">WebView</span><span style="color:#A6ACCD;"> view</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> url</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//如果返回false，则WebView处理链接url，如果返回true，代表WebView根据程序来执行url</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="ios" tabindex="-1">ios <a class="header-anchor" href="#ios" aria-hidden="true">#</a></h3><div class="language-objc"><button title="Copy Code" class="copy"></button><span class="lang">objc</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BOOL</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">webView:</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UIWebView </span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">webView shouldStartLoadWithRequest:</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">NSURLRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">request navigationType:</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">UIWebViewNavigationType</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">navigationType </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">NSURL</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">url </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">request </span><span style="color:#82AAFF;">URL</span><span style="color:#89DDFF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">NSString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">requestString </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#F07178;">request </span><span style="color:#82AAFF;">URL</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">absoluteString</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取利润url scheme后自行进行处理</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="native-调用-js" tabindex="-1">Native 调用 JS <a class="header-anchor" href="#native-调用-js" aria-hidden="true">#</a></h2><div class="language-JS"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">JSBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_handleMessageFromNative</span><span style="color:#A6ACCD;">(messageJSON)</span></span>
<span class="line"></span></code></pre></div><h2 id="更完善方案" tabindex="-1">更完善方案 <a class="header-anchor" href="#更完善方案" aria-hidden="true">#</a></h2><p>github 上有一个开源项目,它里面的 JSBridge 做法在 iOS 上进一步优化了,所以参考他的做法,这里进一步进行了完善。地址：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noreferrer">marcuswestin/WebViewJavascriptBridge</a></p><h2 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-hidden="true">#</a></h2><ul><li>优点：兼容性强</li><li>缺点：使用 iframe.src 发送 URL SCHEME 会有 url 长度的隐患</li></ul><h1 id="注入-api" tabindex="-1">注入 API <a class="header-anchor" href="#注入-api" aria-hidden="true">#</a></h1><p>基于<strong>Webview</strong>提供的能力，我们可以向 window 上注入对象或方法。JS 通过这个对象或方法进行调用时，执行对应的逻辑操作，可直接调用 Native 的方法。使用该方式时，JS 需要等到 Native 执行完对应的逻辑后才能进行回调里面的操作。</p><h2 id="js-调用-native-1" tabindex="-1">JS 调用 Native <a class="header-anchor" href="#js-调用-native-1" aria-hidden="true">#</a></h2><h3 id="android-1" tabindex="-1">Android <a class="header-anchor" href="#android-1" aria-hidden="true">#</a></h3><p>Android 的 <strong>Webview</strong> 提供了 addJavascriptInterface 方法，支持 Android4.2 及以上的系统。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">gpcWebView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addJavascriptInterface</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">JavaScriptInterface</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">nativeApiBridge</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JavaScriptInterface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> mContext</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">JavaScriptInterface</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    mContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">share</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">webMessage</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Native 逻辑</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>JS 调用示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NativeApi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">share</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h3 id="ios-1" tabindex="-1">ios <a class="header-anchor" href="#ios-1" aria-hidden="true">#</a></h3><p>iOS 的 UIWebview 提供了 JavaScriptScore 方法，支持 iOS 7.0 及以上系统。WKWebview 提供了 window.webkit.messageHandlers 方法，支持 iOS 8.0 及以上系统。UIWebview 在几年前常用，目前已不常见。以下为创建 WKWebViewConfiguration 和 创建 WKWebView 示例：</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">WKWebViewConfiguration </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">configuration </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [[WKWebViewConfiguration alloc] </span><span style="color:#C792EA;">init</span><span style="color:#A6ACCD;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">WKPreferences </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">preferences </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [WKPreferences new];</span></span>
<span class="line"><span style="color:#A6ACCD;">preferences.javaScriptCanOpenWindowsAutomatically </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> YES;</span></span>
<span class="line"><span style="color:#A6ACCD;">preferences.minimumFontSize </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">40.0</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">configuration.preferences </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> preferences;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">viewWillAppear</span><span style="color:#89DDFF;">:(</span><span style="color:#A6ACCD;">BOOL</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">animated</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    [super viewWillAppear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">animated];</span></span>
<span class="line"><span style="color:#A6ACCD;">    [self.webView.configuration.userContentController addScriptMessageHandler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">self name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">share</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">  	[self.webView.configuration.userContentController addScriptMessageHandler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">self name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pickImage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">viewWillDisappear</span><span style="color:#89DDFF;">:(</span><span style="color:#A6ACCD;">BOOL</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">animated</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    [super viewWillDisappear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">animated];</span></span>
<span class="line"><span style="color:#A6ACCD;">    [self.webView.configuration.userContentController 	removeScriptMessageHandlerForName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">share</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">];</span></span>
<span class="line"><span style="color:#A6ACCD;">    [self.webView.configuration.userContentController removeScriptMessageHandlerForName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">@</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pickImage</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">];</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>JS 调用示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">webkit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">messageHandlers</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">share</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(xxx)</span></span>
<span class="line"></span></code></pre></div><h2 id="native-调用-js-1" tabindex="-1">Native 调用 JS <a class="header-anchor" href="#native-调用-js-1" aria-hidden="true">#</a></h2><p>Native 调用 JS 比较简单，只要 H5 将 JS 方法暴露在 Window 上给 Native 调用即可。 Android 中主要有两种方式实现。在 4.4 以前，通过 loadUrl 方法，执行一段 JS 代码来实现。在 4.4 以后，可以使用 evaluateJavascript 方法实现。loadUrl 方法使用起来方便简洁，但是效率低无法获得返回结果且调用的时候会刷新 WebView。evaluateJavascript 方法效率高获取返回值方便，调用时候不刷新 WebView，但是只支持 Android 4.4+。</p><h3 id="android-2" tabindex="-1">Android <a class="header-anchor" href="#android-2" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">webView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadUrl</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">javascript:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> javaScriptString</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">webView</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evaluateJavascript</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">javaScriptString</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ValueCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onReceiveValue</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    xxx</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="ios-2" tabindex="-1">ios <a class="header-anchor" href="#ios-2" aria-hidden="true">#</a></h3><p>iOS 在 WKWebview 中可以通过 evaluateJavaScript:javaScriptString 来实现，支持 iOS 8.0 及以上系统。</p><div class="language-swift"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">evaluateJavaScript</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">javaScriptString</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;font-style:italic;">completionHandler</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">((</span><span style="color:#FFCB6B;">Any</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">?)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Void</span><span style="color:#89DDFF;">)?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// javaScriptString 需要调用的 JS 代码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// completionHandler 执行后的回调</span></span>
<span class="line"></span></code></pre></div>`,54),o=[p];function t(c,r,i,y,D,F){return n(),a("div",null,o)}const d=s(e,[["render",t]]);export{A as __pageData,d as default};
