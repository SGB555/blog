import{_ as s,c as l,o as a,a as n}from"./app.89a82245.js";const d=JSON.parse('{"title":"JS的类型转换","description":"","frontmatter":{"title":"JS的类型转换","date":"2021-04-14T16:59:11.000Z","tags":["JS"]},"headers":[{"level":2,"title":"ToBoolean","slug":"toboolean","link":"#toboolean","children":[{"level":3,"title":"逻辑非运算符","slug":"逻辑非运算符","link":"#逻辑非运算符","children":[]},{"level":3,"title":"Boolean (value)","slug":"boolean-value","link":"#boolean-value","children":[]},{"level":3,"title":"new Boolean (value)","slug":"new-boolean-value","link":"#new-boolean-value","children":[]},{"level":3,"title":"二元逻辑运算符：&& 和 ||","slug":"二元逻辑运算符-和","link":"#二元逻辑运算符-和","children":[]}]},{"level":2,"title":"ToNumber","slug":"tonumber","link":"#tonumber","children":[]},{"level":2,"title":"ToString","slug":"tostring","link":"#tostring","children":[]},{"level":2,"title":"ToBoolean","slug":"toboolean-1","link":"#toboolean-1","children":[]},{"level":2,"title":"对象转字符串和数字","slug":"对象转字符串和数字","link":"#对象转字符串和数字","children":[]},{"level":2,"title":"ToPrimitive","slug":"toprimitive","link":"#toprimitive","children":[]}],"relativePath":"posts/js/js-type.md"}'),e={name:"posts/js/js-type.md"},t=n(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h1><p>看了 N 次 JS 的类型转换决定总结一下。</p><h1 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-hidden="true">#</a></h1><blockquote><p>ECMAScript 运行时系统会在需要时从事自动类型转换。为了阐明某些结构的语义，定义一集转换运算符是很有用的。这些运算符不是语言的一部分；在这里定义它们是为了协助语言语义的规范。转换运算符是多态的 — 它们可以接受任何 ECMAScript 语言类型 的值，但是不接受 规范类型 。</p></blockquote><p>首先 JS 中的类型转换可以分为基础类型和引用类型的转换，且只有以下 3 种转换：</p><ul><li>转换为布尔值</li><li>转换为数字</li><li>转换为字符串</li></ul><p>那么，下面将分别总结基础类型和引用类型总结。</p><h1 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-hidden="true">#</a></h1><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>number</li><li>String</li><li>Symbol</li></ul><p>Symbol 本身不可类型转换，抛开总结。</p><h2 id="toboolean" tabindex="-1">ToBoolean <a class="header-anchor" href="#toboolean" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">输入类型</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">Undefined</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">Null</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">结果等于输入的参数（不转换）。</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:center;">除 -0，0，NaN 之外均为 true</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">空串（长度为 0）为 false，其余均为 true</td></tr></tbody></table><p>基础类型发生类型转换不外乎以下几种方式，但最终都是遵循上述表格规则转换。</p><h3 id="逻辑非运算符" tabindex="-1">逻辑非运算符 <a class="header-anchor" href="#逻辑非运算符" aria-hidden="true">#</a></h3><p><a href="https://yanhaijing.com/es5/#179" target="_blank" rel="noreferrer">参考链接</a></p><p>产生式 UnaryExpression : ! UnaryExpression 按照下面的过程执行 :</p><ol><li>令 expr 为解释执行 UnaryExpression 的结果 .</li><li>令 oldValue 为 <strong>ToBoolean(GetValue(expr))</strong>.</li><li>如果 oldValue 为 true ，返回 false.</li><li>返回 true.</li></ol><h3 id="boolean-value" tabindex="-1">Boolean (value) <a class="header-anchor" href="#boolean-value" aria-hidden="true">#</a></h3><p><a href="https://yanhaijing.com/es5/#402" target="_blank" rel="noreferrer">参考链接</a></p><p>返回由 <strong>ToBoolean(value)</strong> 计算出的布尔值（非布尔对象）。</p><p>注意：参数为空时返回 false</p><h3 id="new-boolean-value" tabindex="-1">new Boolean (value) <a class="header-anchor" href="#new-boolean-value" aria-hidden="true">#</a></h3><p>新构造对象的 [[Prototype]] 内部属性设定为原始布尔原型对象，它是 Boolean.prototype (15.6.3.1) 的初始值。</p><p>新构造对象的 [[Class]] 内部属性设定为 &quot;Boolean&quot;。</p><p>新构造对象的 [[PrimitiveValue]] 内部属性设定为 <strong>ToBoolean(value)</strong>。</p><p>新构造对象的 [[Extensible]] 内部属性设定为 true。</p><h3 id="二元逻辑运算符-和" tabindex="-1">二元逻辑运算符：&amp;&amp; 和 || <a class="header-anchor" href="#二元逻辑运算符-和" aria-hidden="true">#</a></h3><p><a href="https://yanhaijing.com/es5/#208" target="_blank" rel="noreferrer">参考链接</a></p><h4 id="" tabindex="-1">&amp;&amp; <a class="header-anchor" href="#" aria-hidden="true">#</a></h4><p>如果 <strong>ToBoolean(左值)</strong> 为 false ，返回 lval.</p><h4 id="-1" tabindex="-1">|| <a class="header-anchor" href="#-1" aria-hidden="true">#</a></h4><p>如果 <strong>ToBoolean(lval)</strong> 为 true ，返回 lval.</p><h2 id="tonumber" tabindex="-1">ToNumber <a class="header-anchor" href="#tonumber" aria-hidden="true">#</a></h2><p><a href="https://yanhaijing.com/es5/#106" target="_blank" rel="noreferrer">参考链接</a></p><table><thead><tr><th style="text-align:center;">输入类型</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">Undefined</td><td style="text-align:center;">NaN</td></tr><tr><td style="text-align:center;">Null</td><td style="text-align:center;">+0</td></tr><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">true=&gt;1;false=&gt;+0</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:center;">不转换</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">这段比较复杂，看例子</td></tr></tbody></table><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">()) </span><span style="color:#676E95;font-style:italic;">// +0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// +0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// +0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// -123</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 1.2</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">000123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-000123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// -123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0x11</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123 123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">100a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"></span></code></pre></div><blockquote><p>如果通过 Number 转换函数传入一个字符串，它会试图将其转换成一个整数或浮点数，而且会忽略所有前导的 0，如果有一个字符不是数字，结果都会返回 NaN，鉴于这种严格的判断，我们一般还会使用更加灵活的 parseInt 和 parseFloat 进行转换。</p></blockquote><blockquote><p>parseInt 只解析整数，parseFloat 则可以解析整数和浮点数，如果字符串前缀是 &quot;0x&quot; 或者&quot;0X&quot;，parseInt 将其解释为十六进制数，parseInt 和 parseFloat 都会跳过任意数量的前导空格，尽可能解析更多数值字符，并忽略后面的内容。如果第一个非空格字符是非法的数字直接量，将最终返回 NaN：</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3 abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3.14 abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 3.14</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-12.34</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// -12</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0xFF</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 255</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)) </span><span style="color:#676E95;font-style:italic;">// 0</span></span>
<span class="line"></span></code></pre></div><h2 id="tostring" tabindex="-1">ToString <a class="header-anchor" href="#tostring" aria-hidden="true">#</a></h2><p><a href="https://yanhaijing.com/es5/#111" target="_blank" rel="noreferrer">参考链接</a></p><table><thead><tr><th style="text-align:center;">输入类型</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">Undefined</td><td style="text-align:center;">&quot;undefined&quot;</td></tr><tr><td style="text-align:center;">Null</td><td style="text-align:center;">&quot;null&quot;</td></tr><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">true=&gt;&quot;true&quot;;false=&gt;&quot;false&quot;</td></tr><tr><td style="text-align:center;">Number</td><td style="text-align:center;">参见下文的文法和注释。</td></tr></tbody></table><p>ToString 运算符将数字 m 转换为字符串格式的给出如下所示：</p><ol><li>如果 m 是 NaN，返回字符串 &quot;NaN&quot;。</li><li>如果 m 是 +0 或 -0，返回字符串 &quot;0&quot;。</li><li>如果 m 小于零，返回连接 &quot;-&quot; 和 ToString (-m) 的字符串。</li><li>如果 m 无限大，返回字符串 &quot;Infinity&quot;。 否则，令 n, k, 和 s 是整数，使得 k ≥ 1, 10k-1 ≤ s &lt; 10k，s × 10n-k 的数字值是 m，且 k 足够小。要注意的是，k 是 s 在十进制表示中的数字的个数。s 不被 10 整除，且 s 的至少要求的有效数字位数不一定要被这些标准唯一确定。</li><li>如果 k ≤ n ≤ 21，返回由 k 个 s 在十进制表示中的数字组成的字符串（有序的，开头没有零），后面跟随字符 &#39;0&#39; 的 n-k 次出现。</li><li>如果 0 &lt; n ≤ 21，返回由 s 在十进制表示中的、最多 n 个有效数字组成的字符串，后面跟随一个小数点 &#39;. &#39;，再后面是余下的 k-n 个 s 在十进制表示中的数字。</li><li>如果 -6 &lt; n ≤ 0，返回由字符 &#39;0&#39; 组成的字符串，后面跟随一个小数点 &#39;. &#39;，再后面是字符 &#39;0&#39; 的 -n 次出现，再往后是 k 个 s 在十进制表示中的数字。 否则，如果 k = 1，返回由单个数字 s 组成的字符串，后面跟随小写字母 &#39;e&#39;，根据 n-1 是正或负，再后面是一个加号 &#39;+&#39; 或减号 &#39;-&#39; ，再往后是整数 abs(n-1) 的十进制表示（没有前置的零）。</li><li>返回由 s 在十进制表示中的、最多的有效数字组成的字符串，后面跟随一个小数点 &#39;. &#39;，再后面是余下的是 k-1 个 s 在十进制表示中的数字，再往后是小写字母 &#39;e&#39;，根据 n-1 是正或负，再后面是一个加号 &#39;+ &#39; 或减号 &#39;-&#39; ，再往后是整数 abs(n-1) 的十进制表示（没有前置的零）。</li></ol><h1 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-hidden="true">#</a></h1><p>对象到字符串和对象到数字的转换都是通过调用待转换对象的一个方法来完成的。而 JavaScript 对象有两个不同的方法来执行转换，一个是 toString，一个是 valueOf。注意这个跟上面所说的 ToString 和 ToNumber 是不同的，这两个方法是真实暴露出来的方法。</p><h2 id="toboolean-1" tabindex="-1">ToBoolean <a class="header-anchor" href="#toboolean-1" aria-hidden="true">#</a></h2><p>引用类型转布尔值均为 true</p><h2 id="对象转字符串和数字" tabindex="-1">对象转字符串和数字 <a class="header-anchor" href="#对象转字符串和数字" aria-hidden="true">#</a></h2><p>对象转字符串和数字时会先调用 ToPrimitive 将其转为基本类型，而后分别根据所需转类型的规则再转换。</p><p>根据<a href="https://yanhaijing.com/es5/#105" target="_blank" rel="noreferrer">规范</a>：</p><table><thead><tr><th style="text-align:center;">输入类型</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">Object</td><td style="text-align:center;">转字符串 <br>1. primValue = ToPrimitive(input, String) <br>2. 返回 ToString(primValue).</td></tr><tr><td style="text-align:center;">Object</td><td style="text-align:center;">转数字 <br>1. primValue = ToPrimitive(input, Number) <br>2. 返回 ToNumber(primValue).</td></tr></tbody></table><h2 id="toprimitive" tabindex="-1">ToPrimitive <a class="header-anchor" href="#toprimitive" aria-hidden="true">#</a></h2><p>ToPrimitive: <a href="https://yanhaijing.com/es5/#103" target="_blank" rel="noreferrer">参考链接</a></p><p>DefaultValue: <a href="https://yanhaijing.com/es5/#100" target="_blank" rel="noreferrer">参考链接</a></p><p>ToPrimitive 实际上就是调用对象的内部方法[[DefaultValue]]</p><p>如果是 ToPrimitive(obj, Number)，处理步骤如下：</p><ol><li>如果 obj 为 基本类型，直接返回</li><li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，JavaScript 抛出一个类型错误异常。</li></ol><p>如果是 ToPrimitive(obj, String)，处理步骤如下：</p><ol><li>如果 obj 为 基本类型，直接返回</li><li>否则，调用 toString 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，调用 valueOf 方法，如果返回一个原始值，则 JavaScript 将其返回。</li><li>否则，JavaScript 抛出一个类型错误异常。</li></ol>`,60),o=[t];function p(r,c,i,y,A,D){return a(),l("div",null,o)}const C=s(e,[["render",p]]);export{d as __pageData,C as default};
